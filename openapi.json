{
  "openapi": "3.1.0",
  "info": {
    "title": "Hodei Artifacts API",
    "description": "REST API for Hodei Artifacts - A secure, policy-driven artifact management system",
    "license": {
      "name": "MIT",
      "identifier": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/v1/iam/policies": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Handler to list policies with pagination",
        "operationId": "list_policies",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of policies to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of policies to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPoliciesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Handler to create a new IAM policy",
        "operationId": "create_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid policy content"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/iam/policies/delete": {
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Handler to delete a policy by HRN",
        "operationId": "delete_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Policy not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/iam/policies/get": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Handler to get a policy by HRN",
        "operationId": "get_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid HRN format"
          },
          "404": {
            "description": "Policy not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/iam/policies/update": {
      "put": {
        "tags": [
          "iam"
        ],
        "summary": "Handler to update an existing policy",
        "operationId": "update_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid policy content"
          },
          "404": {
            "description": "Policy not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/playground/evaluate": {
      "post": {
        "tags": [
          "playground"
        ],
        "summary": "Handler for playground policy evaluation",
        "description": "This endpoint allows ad-hoc evaluation of Cedar policies against\nauthorization requests in a playground environment, without requiring\npersistence of policies or schemas.\n\n# Arguments\n\n* `state` - Application state containing use cases\n* `request` - Playground evaluation request\n\n# Returns\n\nA JSON response with the evaluation result or an error\n\n# Example Request\n\n```json\n{\n  \"inline_schema\": \"{\\\"entityTypes\\\": {\\\"User\\\": {\\\"shape\\\": {\\\"type\\\": \\\"Record\\\", \\\"attributes\\\": {}}}}}\",\n  \"inline_policies\": [\n    \"permit(principal, action, resource);\"\n  ],\n  \"request\": {\n    \"principal\": \"hodei::iam::default::User::alice\",\n    \"action\": \"hodei::api::Action::read\",\n    \"resource\": \"hodei::storage::default::Document::doc1\",\n    \"context\": {\n      \"ip\": {\n        \"type\": \"String\",\n        \"value\": \"192.168.1.1\"\n      }\n    }\n  }\n}\n```\n\n# Example Response\n\n```json\n{\n  \"decision\": \"ALLOW\",\n  \"determining_policies\": [\n    {\n      \"policy_id\": \"policy_0\",\n      \"effect\": \"permit\",\n      \"policy_text\": \"permit(principal, action, resource);\"\n    }\n  ],\n  \"diagnostics\": {\n    \"total_policies\": 1,\n    \"matched_policies\": 1,\n    \"schema_validated\": true,\n    \"validation_errors\": [],\n    \"warnings\": []\n  },\n  \"errors\": []\n}\n```",
        "operationId": "playground_evaluate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaygroundEvaluateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy evaluation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundEvaluateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/policies/evaluate": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Handler to evaluate policies",
        "description": "This endpoint evaluates an authorization request against a set of policies.\n\n# Arguments\n\n* `state` - Application state containing use cases\n* `request` - Policy evaluation request\n\n# Returns\n\nA JSON response with the evaluation decision or an error\n\n# Example Request\n\n```json\n{\n  \"principal_hrn\": \"hrn:aws:iam::123:user/alice\",\n  \"action\": \"CreateUser\",\n  \"resource_hrn\": \"hrn:aws:iam::123:user/bob\",\n  \"policies\": [\n    \"permit(principal, action, resource);\"\n  ],\n  \"context\": {},\n  \"evaluation_mode\": \"BestEffortNoSchema\"\n}\n```\n\n# Example Response\n\n```json\n{\n  \"decision\": \"Allow\",\n  \"determining_policies\": [],\n  \"reasons\": [],\n  \"used_schema_version\": null,\n  \"policy_ids_evaluated\": [\"policy_0\"],\n  \"diagnostics\": []\n}\n```",
        "operationId": "evaluate_policies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatePoliciesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policies evaluated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatePoliciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid evaluation request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/policies/validate": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Handler to validate a policy",
        "description": "This endpoint validates a Cedar policy for syntax correctness\nand optionally checks it against the active schema.\n\n# Arguments\n\n* `state` - Application state containing use cases\n* `request` - Policy validation request\n\n# Returns\n\nA JSON response with validation results or an error\n\n# Example Request\n\n```json\n{\n  \"content\": \"permit(principal, action, resource);\",\n  \"use_schema\": true\n}\n```\n\n# Example Response\n\n```json\n{\n  \"is_valid\": true,\n  \"errors\": [],\n  \"warnings\": []\n}\n```",
        "operationId": "validate_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Policy validated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid policy content"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/schemas/build": {
      "post": {
        "tags": [
          "schemas"
        ],
        "summary": "Handler to build a schema",
        "description": "This endpoint builds a Cedar schema from all currently registered\nentity and action types.\n\n# Arguments\n\n* `state` - Application state containing use cases\n* `request` - Build schema request parameters\n\n# Returns\n\nA JSON response with the build result or an error",
        "operationId": "build_schema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildSchemaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Schema built successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildSchemaResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/schemas/load": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Handler to load a schema",
        "description": "This endpoint loads a previously built schema from storage.\n\n# Arguments\n\n* `state` - Application state containing use cases\n\n# Returns\n\nA JSON response with the loaded schema information or an error",
        "operationId": "load_schema",
        "responses": {
          "200": {
            "description": "Schema loaded successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/schemas/register-iam": {
      "post": {
        "tags": [
          "schemas"
        ],
        "summary": "Handler to register IAM schema",
        "description": "This endpoint registers all IAM entity types (User, Group) and\naction types (CreateUser, DeleteUser, etc.) and builds the schema.\n\n# Arguments\n\n* `state` - Application state containing use cases\n* `request` - Register IAM schema request parameters\n\n# Returns\n\nA JSON response with the registration result or an error",
        "operationId": "register_iam_schema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterIamSchemaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IAM schema registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterIamSchemaResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health check handler",
        "description": "This endpoint returns a simple health status indicating that the service\nis running and responsive. It's used for basic liveness probes.\n\n# Returns\n\nA JSON response with health status\n\n# Example Response\n\n```json\n{\n  \"status\": \"healthy\",\n  \"version\": \"0.1.0\",\n  \"service\": \"hodei-artifacts-api\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttributeValueDto": {
        "oneOf": [
          {
            "type": "object",
            "description": "String value",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "String"
                ]
              },
              "value": {
                "type": "string",
                "description": "String value"
              }
            }
          },
          {
            "type": "object",
            "description": "Integer value",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Long"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64",
                "description": "Integer value"
              }
            }
          },
          {
            "type": "object",
            "description": "Boolean value",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Bool"
                ]
              },
              "value": {
                "type": "boolean",
                "description": "Boolean value"
              }
            }
          },
          {
            "type": "object",
            "description": "Entity reference (HRN)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "EntityRef"
                ]
              },
              "value": {
                "type": "string",
                "description": "Entity reference (HRN)"
              }
            }
          },
          {
            "type": "object",
            "description": "Set of string values (simplified to avoid recursion)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Set"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Set of string values (simplified to avoid recursion)"
              }
            }
          },
          {
            "type": "object",
            "description": "Record of string values (simplified to avoid recursion)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Record"
                ]
              },
              "value": {
                "type": "object",
                "description": "Record of string values (simplified to avoid recursion)",
                "additionalProperties": {
                  "type": "string"
                },
                "propertyNames": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "description": "Attribute value DTO for context"
      },
      "BuildSchemaRequest": {
        "type": "object",
        "description": "Request to build a schema",
        "properties": {
          "validate": {
            "type": "boolean",
            "description": "Whether to validate the schema after building"
          },
          "version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional schema version"
          }
        }
      },
      "BuildSchemaResponse": {
        "type": "object",
        "description": "Response from building a schema",
        "required": [
          "entity_count",
          "action_count",
          "validated",
          "schema_id"
        ],
        "properties": {
          "action_count": {
            "type": "integer",
            "description": "Number of action types in the schema",
            "minimum": 0
          },
          "entity_count": {
            "type": "integer",
            "description": "Number of entity types in the schema",
            "minimum": 0
          },
          "schema_id": {
            "type": "string",
            "description": "Schema ID in storage"
          },
          "validated": {
            "type": "boolean",
            "description": "Whether the schema was validated"
          },
          "version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Schema version"
          }
        }
      },
      "CreatePolicyRequest": {
        "type": "object",
        "description": "Request to create a new IAM policy",
        "required": [
          "policy_id",
          "policy_content"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "policy_content": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          }
        }
      },
      "CreatePolicyResponse": {
        "type": "object",
        "description": "Response from policy creation",
        "required": [
          "hrn",
          "content",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "hrn": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeletePolicyRequest": {
        "type": "object",
        "description": "Request to delete a policy",
        "required": [
          "policy_hrn"
        ],
        "properties": {
          "policy_hrn": {
            "type": "string"
          }
        }
      },
      "DeletePolicyResponse": {
        "type": "object",
        "description": "Response from policy deletion",
        "required": [
          "deleted_hrn",
          "message"
        ],
        "properties": {
          "deleted_hrn": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "DeterminingPolicyDto": {
        "type": "object",
        "description": "Determining policy DTO",
        "required": [
          "policy_id",
          "effect"
        ],
        "properties": {
          "effect": {
            "type": "string",
            "description": "The effect of the policy (permit or forbid)"
          },
          "policy_id": {
            "type": "string",
            "description": "The policy ID or inline index"
          },
          "policy_text": {
            "type": [
              "string",
              "null"
            ],
            "description": "The policy text (for inline policies)"
          }
        }
      },
      "DiagnosticInfo": {
        "type": "object",
        "description": "Diagnostic information from policy evaluation",
        "required": [
          "level",
          "message"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Diagnostic level: \"info\", \"warning\", \"error\""
          },
          "message": {
            "type": "string",
            "description": "Diagnostic message"
          },
          "policy_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional policy ID related to this diagnostic"
          }
        }
      },
      "EvaluatePoliciesRequest": {
        "type": "object",
        "description": "Request to evaluate policies",
        "required": [
          "principal_hrn",
          "action",
          "resource_hrn",
          "policies"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Action being performed (e.g., \"CreateUser\")"
          },
          "context": {
            "description": "Optional context for the evaluation"
          },
          "evaluation_mode": {
            "type": "string",
            "description": "Evaluation mode"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Cedar policy content (inline policies)"
          },
          "principal_hrn": {
            "type": "string",
            "description": "Principal HRN (e.g., \"hrn:aws:iam::123:user/alice\")"
          },
          "resource_hrn": {
            "type": "string",
            "description": "Resource HRN (e.g., \"hrn:aws:iam::123:user/bob\")"
          },
          "schema_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional schema version to use"
          }
        }
      },
      "EvaluatePoliciesResponse": {
        "type": "object",
        "description": "Response from policy evaluation",
        "required": [
          "decision",
          "determining_policies",
          "reasons",
          "policy_ids_evaluated",
          "diagnostics"
        ],
        "properties": {
          "decision": {
            "type": "string",
            "description": "Decision: \"Allow\" or \"Deny\""
          },
          "determining_policies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Policies that determined the decision"
          },
          "diagnostics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosticInfo"
            },
            "description": "Diagnostic information"
          },
          "policy_ids_evaluated": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Policy IDs that were evaluated"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Reasons for the decision"
          },
          "used_schema_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Schema version used (if any)"
          }
        }
      },
      "EvaluationDiagnosticsDto": {
        "type": "object",
        "description": "Evaluation diagnostics DTO",
        "required": [
          "total_policies",
          "matched_policies",
          "schema_validated",
          "validation_errors",
          "warnings"
        ],
        "properties": {
          "matched_policies": {
            "type": "integer",
            "description": "Number of policies that matched",
            "minimum": 0
          },
          "schema_validated": {
            "type": "boolean",
            "description": "Whether schema validation was performed"
          },
          "total_policies": {
            "type": "integer",
            "description": "Total number of policies evaluated",
            "minimum": 0
          },
          "validation_errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Validation errors (if any)"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Warnings (if any)"
          }
        }
      },
      "GetPolicyRequest": {
        "type": "object",
        "description": "Request to get a policy by HRN",
        "required": [
          "policy_hrn"
        ],
        "properties": {
          "policy_hrn": {
            "type": "string"
          }
        }
      },
      "GetPolicyResponse": {
        "type": "object",
        "description": "Response from getting a policy",
        "required": [
          "hrn",
          "name",
          "content",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "hrn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "description": "Health check response",
        "required": [
          "status",
          "version",
          "service",
          "timestamp"
        ],
        "properties": {
          "service": {
            "type": "string",
            "description": "Service name"
          },
          "status": {
            "type": "string",
            "description": "Service status"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the health check"
          },
          "version": {
            "type": "string",
            "description": "Service version"
          }
        },
        "example": {
          "status": "healthy",
          "version": "0.1.0",
          "service": "hodei-artifacts-api",
          "timestamp": "2024-01-15T10:30:00Z"
        }
      },
      "ListPoliciesQueryParams": {
        "type": "object",
        "description": "Query parameters for listing policies",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "ListPoliciesResponse": {
        "type": "object",
        "description": "Response from listing policies",
        "required": [
          "policies",
          "page_info"
        ],
        "properties": {
          "page_info": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicySummary"
            }
          }
        }
      },
      "PageInfo": {
        "type": "object",
        "description": "Pagination information",
        "required": [
          "total_count",
          "has_next_page",
          "has_previous_page"
        ],
        "properties": {
          "has_next_page": {
            "type": "boolean"
          },
          "has_previous_page": {
            "type": "boolean"
          },
          "total_count": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "PlaygroundAuthorizationRequestDto": {
        "type": "object",
        "description": "Authorization request DTO for playground evaluation",
        "required": [
          "principal",
          "action",
          "resource"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The action being requested"
          },
          "context": {
            "type": "object",
            "description": "Optional context attributes for the request",
            "additionalProperties": {
              "$ref": "#/components/schemas/AttributeValueDto"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "principal": {
            "type": "string",
            "description": "The principal (user/service) making the request"
          },
          "resource": {
            "type": "string",
            "description": "The resource being accessed"
          }
        }
      },
      "PlaygroundEvaluateRequest": {
        "type": "object",
        "description": "Request for playground policy evaluation",
        "required": [
          "inline_policies",
          "request"
        ],
        "properties": {
          "inline_policies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Inline Cedar policies to evaluate (policy text)\nEach string is a complete Cedar policy"
          },
          "inline_schema": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional inline Cedar schema (JSON format)\nIf None, must provide schema_version"
          },
          "request": {
            "$ref": "#/components/schemas/PlaygroundAuthorizationRequestDto",
            "description": "The authorization request to evaluate"
          },
          "schema_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional reference to a stored schema version\nIf None, must provide inline_schema"
          }
        }
      },
      "PlaygroundEvaluateResponse": {
        "type": "object",
        "description": "Response from playground policy evaluation",
        "required": [
          "decision",
          "determining_policies",
          "diagnostics",
          "errors"
        ],
        "properties": {
          "decision": {
            "type": "string",
            "description": "The authorization decision (Allow/Deny)"
          },
          "determining_policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeterminingPolicyDto"
            },
            "description": "Policies that contributed to the decision"
          },
          "diagnostics": {
            "$ref": "#/components/schemas/EvaluationDiagnosticsDto",
            "description": "Diagnostic information about the evaluation"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Errors encountered during evaluation (if any)"
          }
        }
      },
      "PolicySummary": {
        "type": "object",
        "description": "Policy summary for listing",
        "required": [
          "hrn",
          "name",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "hrn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RegisterIamSchemaRequest": {
        "type": "object",
        "description": "Request to register IAM schema",
        "properties": {
          "validate": {
            "type": "boolean",
            "description": "Whether to validate the schema after building"
          },
          "version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional schema version"
          }
        }
      },
      "RegisterIamSchemaResponse": {
        "type": "object",
        "description": "Response from registering IAM schema",
        "required": [
          "entity_types_registered",
          "action_types_registered",
          "schema_version",
          "schema_id",
          "validated"
        ],
        "properties": {
          "action_types_registered": {
            "type": "integer",
            "description": "Number of action types registered",
            "minimum": 0
          },
          "entity_types_registered": {
            "type": "integer",
            "description": "Number of entity types registered",
            "minimum": 0
          },
          "schema_id": {
            "type": "string",
            "description": "Schema ID in storage"
          },
          "schema_version": {
            "type": "string",
            "description": "Schema version"
          },
          "validated": {
            "type": "boolean",
            "description": "Whether the schema was validated"
          }
        }
      },
      "UpdatePolicyRequest": {
        "type": "object",
        "description": "Request to update an existing policy",
        "required": [
          "policy_hrn",
          "policy_content"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "policy_content": {
            "type": "string"
          },
          "policy_hrn": {
            "type": "string"
          }
        }
      },
      "UpdatePolicyResponse": {
        "type": "object",
        "description": "Response from policy update",
        "required": [
          "hrn",
          "content",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "hrn": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ValidatePolicyRequest": {
        "type": "object",
        "description": "Request to validate a policy",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "Cedar policy content to validate"
          },
          "use_schema": {
            "type": "boolean",
            "description": "Whether to use schema-based validation"
          }
        }
      },
      "ValidatePolicyResponse": {
        "type": "object",
        "description": "Response from policy validation",
        "required": [
          "is_valid",
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Validation errors (if any)"
          },
          "is_valid": {
            "type": "boolean",
            "description": "Whether the policy is valid"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "health",
      "description": "Health check endpoints"
    },
    {
      "name": "schemas",
      "description": "Cedar schema management"
    },
    {
      "name": "policies",
      "description": "Policy validation and evaluation"
    },
    {
      "name": "playground",
      "description": "Policy playground for ad-hoc testing"
    },
    {
      "name": "iam",
      "description": "IAM policy management (CRUD)"
    }
  ]
}