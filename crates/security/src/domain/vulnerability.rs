
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

// Representa una única vulnerabilidad normalizada.
#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct Vulnerability {
    pub id: String, // ID único de la vulnerabilidad (ej. CVE-2021-44228)
    pub package_name: String,
    pub package_version: String,
    pub severity: Severity,
    pub description: String,
    pub source: String, // Origen del hallazgo (ej. "Trivy", "Cargo-Audit")
}

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum Severity {
    Low,
    Medium,
    High,
    Critical,
    Unknown,
}

// Representa el informe consolidado y normalizado.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityReport {
    pub artifact_id: String, // HRN del artefacto analizado
    pub report_id: String,   // ID único del informe
    pub status: ScanStatus,
    pub vulnerabilities: Vec<Vulnerability>,
    pub created_at: chrono::DateTime<chrono::Utc>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum ScanStatus {
    InProgress,
    Completed,
    Failed,
}

impl VulnerabilityReport {
    // Lógica para consolidar y deduplicar vulnerabilidades de múltiples fuentes.
    pub fn consolidate(reports: Vec<Vec<Vulnerability>>) -> Vec<Vulnerability> {
        let mut unique_vulnerabilities = HashMap::new();
        for report in reports {
            for vulnerability in report {
                unique_vulnerabilities.entry(vulnerability.id.clone()).or_insert(vulnerability);
            }
        }
        unique_vulnerabilities.into_values().collect()
    }
}
