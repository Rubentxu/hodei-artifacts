// crates/security/src/domain/vulnerability.rs

use shared::hrn::{Hrn, PackageVersionId, VulnerabilityDefinitionId, UserId};
use shared::lifecycle::Lifecycle;
use shared::enums::VulnerabilitySeverity;
use serde::{Serialize, Deserialize};
use time::OffsetDateTime;

/// Representa la definición canónica y normalizada de una vulnerabilidad (ej. un CVE).
/// Se almacena una sola vez y se reutiliza en múltiples ocurrencias.
/// Es un Agregado Raíz.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityDefinition {
    /// HRN único para esta definición de vulnerabilidad.
    /// Formato: `hrn:hodei:security:global:vulnerability/<source>/<source_id>`
    pub hrn: VulnerabilityDefinitionId,
    
    /// El identificador de la vulnerabilidad en su fuente original (ej. "CVE-2021-44228").
    pub source_id: String,
    
    /// La base de datos de origen de la vulnerabilidad.
    pub source: VulnerabilitySource,
    
    /// La severidad asignada por la fuente.
    pub severity: VulnerabilitySeverity,
    
    /// Título o resumen corto de la vulnerabilidad.
    pub summary: String,
    
    /// Descripción detallada de la vulnerabilidad.
    pub details: String,
    
    /// Puntuación CVSS, si está disponible.
    pub cvss: Option<CvssVector>,
    
    /// Lista de URLs para más información (avisos, mitigaciones, etc.).
    pub references: Vec<String>,
    
    /// Información de auditoría (cuándo se añadió a la base de datos de Hodei).
    pub lifecycle: Lifecycle,
}

/// Representa la ocurrencia de una `VulnerabilityDefinition` en un `PackageVersion` específico.
/// Es una entidad que vive dentro del contexto de un `SecurityScanResult`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityOccurrence {
    /// HRN único para esta ocurrencia específica.
    /// Formato: `hrn:hodei:security:<region>:<org_id>:occurrence/<occurrence_id>`
    pub hrn: Hrn,

    /// HRN del `PackageVersion` afectado.
    pub package_version_hrn: PackageVersionId,
    
    /// HRN de la `VulnerabilityDefinition` canónica.
    pub vulnerability_definition_hrn: VulnerabilityDefinitionId,
    
    /// El estado de esta ocurrencia (ej. si ha sido ignorada por un usuario).
    pub status: OccurrenceStatus,
    
    /// Información detallada si la ocurrencia ha sido ignorada.
    pub ignore_info: Option<IgnoreInfo>,
    
    /// Indica si existe una versión del paquete que corrige esta vulnerabilidad.
    pub fix_is_available: bool,
    
    /// Lista de versiones del paquete que contienen el parche.
    pub fixed_in_versions: Vec<String>,

    /// Información de auditoría.
    pub lifecycle: Lifecycle,
}

/// Vector CVSS v3.1 para una puntuación detallada.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CvssVector {
    pub version: String, // "3.1"
    pub vector_string: String, // "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"
    pub base_score: f32,
    pub temporal_score: Option<f32>,
    pub environmental_score: Option<f32>,
}

/// Información sobre la decisión de ignorar una vulnerabilidad.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IgnoreInfo {
    pub reason: String,
    pub expires_at: Option<OffsetDateTime>,
    pub ignored_by: UserId,
}

/// La base de datos de origen de una vulnerabilidad.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
pub enum VulnerabilitySource { Nvd, GitHubAdvisory, Osv, Trivy, Snyk, Other }

/// El estado de una ocurrencia de vulnerabilidad.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
pub enum OccurrenceStatus { Unresolved, Patched, Ignored, FalsePositive }