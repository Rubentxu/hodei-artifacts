use crate::domain::vulnerability::VulnerabilityReport;
use crate::features::get_vulnerability_report::ports::IVulnerabilityReportRepository;
use std::sync::Arc;

pub struct GetVulnerabilityReportUseCase {
    repository: Arc<dyn IVulnerabilityReportRepository>,
}

impl GetVulnerabilityReportUseCase {
    pub fn new(repository: Arc<dyn IVulnerabilityReportRepository>) -> Self {
        Self { repository }
    }

    pub async fn get_by_artifact_id(&self, artifact_id: &str) -> Result<Option<VulnerabilityReport>, String> {
        self.repository
            .get_report_by_artifact_id(artifact_id)
            .await
            .map_err(|e| e.to_string())
    }

    pub async fn get_by_report_id(&self, report_id: &str) -> Result<Option<VulnerabilityReport>, String> {
        self.repository
            .get_report_by_id(report_id)
            .await
            .map_err(|e| e.to_string())
    }
}