use async_trait::async_trait;
use crate::domain::vulnerability::VulnerabilityReport;
use crate::features::get_vulnerability_report::ports::{IVulnerabilityReportRepository, RepositoryError};
use mongodb::Collection;

// --- Adaptador para el Repositorio en MongoDB ---
pub struct MongoVulnerabilityReportRepository {
    collection: Collection<VulnerabilityReport>,
}

impl MongoVulnerabilityReportRepository {
    pub fn new(collection: Collection<VulnerabilityReport>) -> Self {
        Self { collection }
    }
}

#[async_trait]
impl IVulnerabilityReportRepository for MongoVulnerabilityReportRepository {
    async fn get_report_by_artifact_id(&self, artifact_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {
        self.collection
            .find_one(mongodb::bson::doc! { "artifact_id": artifact_id })
            .await
            .map_err(|e| RepositoryError::GetError(e.to_string()))
    }

    async fn get_report_by_id(&self, report_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {
        self.collection
            .find_one(mongodb::bson::doc! { "report_id": report_id })
            .await
            .map_err(|e| RepositoryError::GetError(e.to_string()))
    }
}