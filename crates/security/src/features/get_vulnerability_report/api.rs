use crate::features::get_vulnerability_report::use_case::GetVulnerabilityReportUseCase;
use std::sync::Arc;
use axum::{
    extract::{Path, State},
    Json,
    http::StatusCode,
};
use serde::{Serialize};

#[derive(Serialize)]
pub struct GetVulnerabilityReportResponse {
    report: Option<crate::domain::vulnerability::VulnerabilityReport>,
}

pub struct GetVulnerabilityReportEndpoint {
    use_case: Arc<GetVulnerabilityReportUseCase>,
}

impl GetVulnerabilityReportEndpoint {
    pub fn new(use_case: Arc<GetVulnerabilityReportUseCase>) -> Self {
        Self { use_case }
    }

    pub async fn get_by_artifact_id(
        State(state): State<Arc<GetVulnerabilityReportEndpoint>>,
        Path(artifact_id): Path<String>,
    ) -> Result<Json<GetVulnerabilityReportResponse>, StatusCode> {
        match state.use_case.get_by_artifact_id(&artifact_id).await {
            Ok(report) => Ok(Json(GetVulnerabilityReportResponse { report })),
            Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
        }
    }

    pub async fn get_by_report_id(
        State(state): State<Arc<GetVulnerabilityReportEndpoint>>,
        Path(report_id): Path<String>,
    ) -> Result<Json<GetVulnerabilityReportResponse>, StatusCode> {
        match state.use_case.get_by_report_id(&report_id).await {
            Ok(report) => Ok(Json(GetVulnerabilityReportResponse { report })),
            Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
        }
    }
}