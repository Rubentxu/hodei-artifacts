#[cfg(test)]
mod tests {
    use crate::features::get_vulnerability_report::use_case::GetVulnerabilityReportUseCase;
    use crate::features::get_vulnerability_report::ports::{IVulnerabilityReportRepository, RepositoryError};
    use crate::domain::vulnerability::{VulnerabilityReport, Vulnerability, Severity, ScanStatus};
    use std::sync::Arc;
    use mockall::mock;
    use async_trait::async_trait;
    use chrono::Utc;

    mock! {
        pub VulnerabilityReportRepository {
            async fn get_report_by_artifact_id(&self, artifact_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {}
            async fn get_report_by_id(&self, report_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {}
        }
    }

    #[async_trait]
    impl IVulnerabilityReportRepository for MockVulnerabilityReportRepository {
        async fn get_report_by_artifact_id(&self, artifact_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {
            self.get_report_by_artifact_id(artifact_id).await
        }
        
        async fn get_report_by_id(&self, report_id: &str) -> Result<Option<VulnerabilityReport>, RepositoryError> {
            self.get_report_by_id(report_id).await
        }
    }

    #[tokio::test]
    async fn test_get_by_artifact_id_success() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        let report = VulnerabilityReport {
            artifact_id: "test-artifact-id".to_string(),
            report_id: "test-report-id".to_string(),
            status: ScanStatus::Completed,
            vulnerabilities: vec![Vulnerability {
                id: "CVE-123".to_string(),
                package_name: "test-package".to_string(),
                package_version: "1.0.0".to_string(),
                severity: Severity::High,
                description: "Test vulnerability".to_string(),
                source: "test-scanner".to_string(),
            }],
            created_at: Utc::now(),
        };
        
        repository.expect_get_report_by_artifact_id()
            .returning(move |_| Ok(Some(report.clone())));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_artifact_id("test-artifact-id").await;

        // Assert
        assert!(result.is_ok());
        let report = result.unwrap();
        assert!(report.is_some());
        assert_eq!(report.unwrap().artifact_id, "test-artifact-id");
    }

    #[tokio::test]
    async fn test_get_by_artifact_id_not_found() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        
        repository.expect_get_report_by_artifact_id()
            .returning(|_| Ok(None));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_artifact_id("non-existent-id").await;

        // Assert
        assert!(result.is_ok());
        assert!(result.unwrap().is_none());
    }

    #[tokio::test]
    async fn test_get_by_report_id_success() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        let report = VulnerabilityReport {
            artifact_id: "test-artifact-id".to_string(),
            report_id: "test-report-id".to_string(),
            status: ScanStatus::Completed,
            vulnerabilities: vec![Vulnerability {
                id: "CVE-123".to_string(),
                package_name: "test-package".to_string(),
                package_version: "1.0.0".to_string(),
                severity: Severity::High,
                description: "Test vulnerability".to_string(),
                source: "test-scanner".to_string(),
            }],
            created_at: Utc::now(),
        };
        
        repository.expect_get_report_by_id()
            .returning(move |_| Ok(Some(report.clone())));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_report_id("test-report-id").await;

        // Assert
        assert!(result.is_ok());
        let report = result.unwrap();
        assert!(report.is_some());
        assert_eq!(report.unwrap().report_id, "test-report-id");
    }

    #[tokio::test]
    async fn test_get_by_artifact_id_repository_error() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        
        repository.expect_get_report_by_artifact_id()
            .returning(|_| Err(RepositoryError::GetError("Database error".to_string())));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_artifact_id("test-artifact-id").await;

        // Assert
        assert!(result.is_err());
        assert_eq!(result.unwrap_err(), "Failed to get report: Database error");
    }

    #[tokio::test]
    async fn test_get_by_report_id_repository_error() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        
        repository.expect_get_report_by_id()
            .returning(|_| Err(RepositoryError::GetError("Database error".to_string())));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_report_id("test-report-id").await;

        // Assert
        assert!(result.is_err());
        assert_eq!(result.unwrap_err(), "Failed to get report: Database error");
    }

    #[tokio::test]
    async fn test_get_by_artifact_id_empty_string() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        
        repository.expect_get_report_by_artifact_id()
            .returning(|_| Ok(None));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_artifact_id("").await;

        // Assert
        assert!(result.is_ok());
        assert!(result.unwrap().is_none());
    }

    #[tokio::test]
    async fn test_get_by_report_id_empty_string() {
        // Arrange
        let mut repository = MockVulnerabilityReportRepository::new();
        
        repository.expect_get_report_by_id()
            .returning(|_| Ok(None));

        let use_case = GetVulnerabilityReportUseCase::new(Arc::new(repository));

        // Act
        let result = use_case.get_by_report_id("").await;

        // Assert
        assert!(result.is_ok());
        assert!(result.unwrap().is_none());
    }
}