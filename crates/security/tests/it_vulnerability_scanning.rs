#[cfg(test)]
mod tests {
    use mongodb::{Client, Collection};
    use security::features::scan_for_vulnerabilities::{
        adapter::{DefaultScannerProvider, MongoVulnerabilityRepository, TrivyScannerAdapter, CargoAuditScannerAdapter},
        use_case::ScanForVulnerabilitiesUseCase,
        api::VulnerabilityScanEventHandler,
        ports::{IScanner, IPhysicalArtifactRepository, RepositoryError}
    };
    use security::domain::vulnerability::VulnerabilityReport;
    use artifact::domain::events::ArtifactEvent;
    use artifact::domain::physical_artifact::PhysicalArtifact;
    use shared::hrn::{Hrn, OrganizationId, PhysicalArtifactId};
    use shared::lifecycle::Lifecycle;
    use shared::models::{ContentHash, ArtifactReference};
    use shared::enums::{HashAlgorithm, ArtifactType};
    use std::collections::HashMap;
    use std::sync::Arc;
    use async_trait::async_trait;
    use mockall::mock;
    use testcontainers::runners::AsyncRunner;
    use testcontainers_modules::mongo::Mongo;

    mock! {
        pub PhysicalArtifactRepository {
            async fn get_by_hrn(&self, hrn: &PhysicalArtifactId) -> Result<PhysicalArtifact, RepositoryError> {}
        }
    }

    #[async_trait]
    impl IPhysicalArtifactRepository for MockPhysicalArtifactRepository {
        async fn get_by_hrn(&self, hrn: &PhysicalArtifactId) -> Result<PhysicalArtifact, RepositoryError> {
            self.get_by_hrn(hrn).await
        }
    }

    #[tokio::test]
    async fn test_vulnerability_scanning_integration() {
        // Arrange
        let mongo_container = Mongo::default().start().await.unwrap();
        let mongo_port = mongo_container.get_host_port_ipv4(27017).await.unwrap();
        let mongo_uri = format!("mongodb://localhost:{}", mongo_port);

        let client = Client::with_uri_str(&mongo_uri).await.unwrap();
        let db = client.database("test_db");
        let collection: Collection<VulnerabilityReport> = db.collection("vulnerability_reports");

        let trivy_scanner = Arc::new(TrivyScannerAdapter);
        let cargo_audit_scanner = Arc::new(CargoAuditScannerAdapter);
        let scanners: Vec<Arc<dyn IScanner>> = vec![trivy_scanner, cargo_audit_scanner];

        let scanner_provider = Arc::new(DefaultScannerProvider::new(scanners));
        let repository = Arc::new(MongoVulnerabilityRepository::new(collection.clone()));
        let mut artifact_repository = MockPhysicalArtifactRepository::new();

        let creator_hrn = Hrn::new("hrn:hodei:iam:us-east-1:123456789012:user/test-user").unwrap();
        let artifact_hrn = Hrn::new("hrn:hodei:artifact:us-east-1:123456789012:physical-artifact/sha256-123").unwrap();
        let artifact = PhysicalArtifact {
            hrn: artifact_hrn.clone(),
            organization_hrn: OrganizationId::new("123456789012").unwrap(),
            content_hash: ContentHash { algorithm: HashAlgorithm::Sha256, value: "123".to_string() },
            size_in_bytes: 100,
            checksums: HashMap::new(),
            storage_location: "s3://bucket/key.oci".to_string(),
            lifecycle: Lifecycle::new(creator_hrn),
        };

        artifact_repository.expect_get_by_hrn()
            .returning(move |_| Ok(artifact.clone()));

        let use_case = Arc::new(ScanForVulnerabilitiesUseCase::new(scanner_provider, repository, Arc::new(artifact_repository)));
        let event_handler = VulnerabilityScanEventHandler::new(use_case);

        let artifact_ref = ArtifactReference {
            artifact_hrn: PhysicalArtifactId::new("hrn:hodei:artifact:us-east-1:123456789012:physical-artifact/sha256-123").unwrap(),
            artifact_type: ArtifactType::Primary,
            role: None,
        };
        let event = ArtifactEvent::ArtifactUploaded { artifact: artifact_ref };

        // Act
        event_handler.handle(&event).await;

        // Assert
        let report = collection.find_one(mongodb::bson::doc! {}).await.unwrap().unwrap();
        assert_eq!(report.artifact_id, artifact_hrn.to_string());
        assert_eq!(report.vulnerabilities.len(), 1);
        assert_eq!(report.vulnerabilities[0].id, "CVE-2021-44228");
    }
}