#[cfg(test)]
mod tests {
    use mongodb::{Client, Collection};
    use security::features::get_vulnerability_report::{
        adapter::MongoVulnerabilityReportRepository,
        use_case::GetVulnerabilityReportUseCase,
    };
    use security::domain::vulnerability::{VulnerabilityReport, Vulnerability, Severity, ScanStatus};
    use std::sync::Arc;
    use testcontainers::runners::AsyncRunner;
    use testcontainers_modules::mongo::Mongo;
    use chrono::Utc;

    #[tokio::test]
    async fn test_get_vulnerability_report_integration() {
        // Arrange
        let mongo_container = Mongo::default().start().await.unwrap();
        let mongo_port = mongo_container.get_host_port_ipv4(27017).await.unwrap();
        let mongo_uri = format!("mongodb://localhost:{}", mongo_port);

        let client = Client::with_uri_str(&mongo_uri).await.unwrap();
        let db = client.database("test_db");
        let collection: Collection<VulnerabilityReport> = db.collection("vulnerability_reports");

        let repository = Arc::new(MongoVulnerabilityReportRepository::new(collection.clone()));
        let use_case = GetVulnerabilityReportUseCase::new(repository.clone());

        let report = VulnerabilityReport {
            artifact_id: "test-artifact-id".to_string(),
            report_id: "test-report-id".to_string(),
            status: ScanStatus::Completed,
            vulnerabilities: vec![Vulnerability {
                id: "CVE-123".to_string(),
                package_name: "test-package".to_string(),
                package_version: "1.0.0".to_string(),
                severity: Severity::High,
                description: "Test vulnerability".to_string(),
                source: "test-scanner".to_string(),
            }],
            created_at: Utc::now(),
        };

        // Insertar el reporte en la base de datos
        collection.insert_one(&report).await.unwrap();

        // Act
        let result = use_case.get_by_artifact_id("test-artifact-id").await;

        // Assert
        assert!(result.is_ok());
        let retrieved_report = result.unwrap();
        assert!(retrieved_report.is_some());
        assert_eq!(retrieved_report.unwrap().artifact_id, "test-artifact-id");
    }
}